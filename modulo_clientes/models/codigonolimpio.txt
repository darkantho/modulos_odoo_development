from copy import copy
from datetime import datetime, date, timedelta
from email.policy import default
from pyexpat import model
import string
from xml.dom import ValidationErr
from odoo import api, models, fields
from odoo import _
import base64


class dbots(models.Model):
    _name = "db.ots"
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _description = "database for new OT"
    _rec_name = "ot_number"

    #funciones por defecto en campos
    @api.model
    def default_mails(self):
        return self.env['personal.inducom'].search([('COD_IND', 'in', ['B0001', 'B0003','B0004','B0005','B0006'])]).ids


    # campos de la OT
    ot_number = fields.Char(string="OT", index=True, readonly=True, default=lambda self: _("Nueva orden de trabajo"))
    created_by = fields.Char(string="Elaborado Por", required=True, default=lambda self: self.env.user.name)
    email = fields.Char(string="Correo", required=True, default=lambda self: self.env.user.email)
    to = fields.Many2many("personal.inducom", "name", "email", "area", string="Responsables",default=default_mails)
    bill = fields.Char(string="Factura/Cotizacion", required=True)
    Orden_de_Compra = fields.Char(String="Orden de Compra", required=True)
    area = fields.Selection([
        ("bodega", "Bodega"),
        ("taller", "Taller")
    ], string="Area designada", required=True, tracking=True)

    state_ot = fields.Selection([
        ("cancelada", "Orden Anulada"),
        ("progreso", "Orden en Progreso"),
        ("revision", "Orden en Revision"),
        ("finalizada", "Orden Finalizada a Tiempo"),
        ("finalizada2", "Orden Finalizada fuera del plazo"),
        ("vencida", "Orden no completada")
    ], string="Estado de la OT", required=True, default="progreso", store=True, tracking=True)

    work_type = fields.Selection([
        ("armado", "Armado"),
        ("prueba", "Prueba de arranque"),
        ("visita", "visita Tecnica"),
        ("sci", "Sistema contra incendio"),
        ("cbc", "conjunto de bombeo completo"),
        ("otro", "otro")
    ], string="Servicio Requerido", required=True)

    ot_other_service = fields.Char(string="Otro Tipo de Servicio", default="", tracking=True)
    ot_progress = fields.Float(string="Estado Actual(%)")
    ot_progress_opt = fields.Float(string="Estado optimo(%)", default="0")
    ot_progress_cat = fields.Selection([
        ("1", "entre 0% del 24%"),
        ("2", "entre 25% y 49%"),
        ("3", "entre 50% y 74% "),
        ("4", "entre 75% y 100%"),
    ], string="Estado actual", default="1")
    ot_begin = fields.Date(string="Fecha inicio", store=True, readonly=True, default=date.today())
    ot_end = fields.Date(string="Fecha fin", store=True, tracking=True, requiered=True)
    datediff = fields.Integer(string="Duracion", compute="difference_date", store=True)
    bom_ids = fields.One2many("materiales.inducom", "order_id", string="Lista de material")
    other_requeriments = fields.Text(string="Descripcion del trabajo")
    cancelacion = fields.Text(string="Motivo de Cancelacion")
    # campos del cliente
    client_name = fields.Many2one("clientes.inducom", string="Cliente")
    id_client = fields.Char(string="Codigo Cliente", related="client_name.cod_client", required=True)
    client_type = fields.Selection(string="Tipo", related="client_name.client_type")
    vendor_name = fields.Char(string="Vendedor", related="client_name.vendor")
    vendor_email = fields.Char(string="Correo Vendedor", related="client_name.vendor_email")

    def ot_end_button(self):
        print("algo")

    def generate_mail_orders(self):
        data = []
        contador = 0
        orders = self.env["db.ots"].search([('state_ot', '=', 'progreso')])
        for order in orders:
            # array en email_to para enviar a mas personas
            data.append([order.ot_number])
            contador += 1
        mail_values = {
            'subject': 'ordenes de trabajo activas',
            'body_html': 'tiene %s ordenes activas' % contador,
            'email_to': 'bi@inducom-ec.com,direccion1@inducom-ec.com,serviciocliente@inducom-ec.com,gcordova@inducom-ec.com',
            'email_from': 'botinducom@gmail.com'
        }
        # mail_values = {
        #     'subject': 'ordenes de trabajo activas',
        #     'body_html': 'tiene %s ordenes activas' % contador,
        #     'email_to': 'bi@inducom-ec.com',
        #     'email_from': 'botinducom@gmail.com'
        # }
        self.env["mail.mail"].create(mail_values).send()

    def update_status_orders_server(self):
        orders = self.env["db.ots"].search([])
        fecha_hoy = date.today()
        for order in orders:
            dias_transcurridos = (fecha_hoy - order.ot_begin).days
            dias_totales = order.datediff
            print(order.ot_number, dias_transcurridos, dias_totales)
            if dias_transcurridos == 0:
                order.ot_progress_opt = 0
                order.ot_progress_cat = "1"
            elif dias_transcurridos == dias_totales:
                order.ot_progress_opt = 100
                order.ot_progress_cat = "4"
            else:
                calculo_progreso = (100 / dias_totales) * dias_transcurridos
                order.ot_progress_opt = 100 if calculo_progreso >= 100 else calculo_progreso
                if 0 <= calculo_progreso < 25:
                    order.ot_progress_cat = "1"
                elif 25 <= calculo_progreso < 50:
                    order.ot_progress_cat = "2"
                elif 50 <= calculo_progreso < 75:
                    order.ot_progress_cat = "3"
                else:
                    order.ot_progress_cat = "4"

    def change_status_orders_server(self):

        # orders = self.env["db.ots"].search([('state_ot', '=', 'progreso')])
        # day_com = date.today()
        # contador=0
        # for order in orders:
        #     if day_com > order.ot_end:
        #         contador += 1
        #         # order.state_ot = "vencida"
        # mail_values = {
        #     'subject': 'Total de ordenes de trabajo vencidas',
        #     'body_html': 'tiene %s ordenes que vencieron el plazo planificado de finalización ' % contador,
        #     'email_to': 'bi@inducom-ec.com',
        #     'email_from': 'anthony1320081@gmail.com'
        # }
        # self.env["mail.mail"].create(mail_values).send()
        orders = self.env["db.ots"].search([('state_ot', '=', 'progreso')])
        print(orders)
        contador = 0
        for order in orders:
            contador += 1
            order.state_ot = "vencida"
        orders = self.env["db.ots"].search([('state_ot', '=', 'progreso')])
        print(orders)
        mail_values = {
            'subject': 'Total de ordenes de trabajo vencidas',
            'body_html': 'tiene %s ordenes que vencieron el plazo planificado de finalización ' % contador,
            'email_to': 'bi@inducom-ec.com,direccion1@inducom-ec.com,serviciocliente@inducom-ec.com,gcordova@inducom-ec.com',
            'email_from': 'botinducom@gmail.com'
        }
        # mail_values = {
        #     'subject': 'Total de ordenes de trabajo vencidas',
        #     'body_html': 'tiene %s ordenes que vencieron el plazo planificado de finalización ' % contador,
        #     'email_to': 'bi@inducom-ec.com',
        #     'email_from': 'botinducom@gmail.com'
        # }
        self.env["mail.mail"].create(mail_values).send()

    def get_status_ot(self, valor):
        if valor == "cancelada":
            return " Orden Anulada"
        elif valor == "progreso":
            return " Orden en Progreso"
        elif valor == "revision":
            return "Orden en Revision"
        elif valor == "finalizada":
            return "Orden Finalizada a Tiempo"
        elif valor == "finalizada2":
            return "Orden Finalizada Fuera del Plazo"
        else:
            return "Orden no Completada"

    @api.model
    def create(self, vals):
        if vals.get("ot_number", _("Nueva orden de trabajo")) == _("Nueva orden de trabajo"):
            vals["ot_number"] = self.env['ir.sequence'].next_by_code("ot_counter") or "/"
        res = super(dbots, self).create(vals)
        return res


    @api.depends("ot_begin", "ot_end")
    def difference_date(self):
        d1 = self.ot_begin
        d2 = self.ot_end
        if d1 and d2:
            if d2 > d1:
                self.datediff = (d2 - d1).days
            else:
                raise ValueError("la fecha de inicio debe ser menor que la fecha de finalizacion")

    @api.onchange("work_type")
    def onchange_work_type(self):
        option = self.work_type
        if option == "prueba":
            self.ot_end = datetime.now() + timedelta(days=10)
            self.bom_ids = [(5, 0, 0)]
        elif option == "sci":
            self.ot_end = datetime.now() + timedelta(days=20)
            self.bom_ids = [(5, 0, 0)]
            # lines = []
            # vals = {
            #     'material_id': self.env["productos.inducom"].search([("product_id", "=", "C0001")]),
            #     'cantidad': 1,
            #     'estado': 'verificacion',
            # }
            # lines.append((0, 0, vals))
            #
            # vals = {
            #     'material_id': self.env["productos.inducom"].search([("product_id", "=", "C0004")]),
            #     'cantidad': 1,
            #     'estado': 'verificacion',
            # }
            # lines.append((0, 0, vals))
            #
            # vals = {
            #     'material_id': self.env["productos.inducom"].search([("product_id", "=", "C0005")]),
            #     'cantidad': 1,
            #     'estado': 'verificacion',
            # }
            # lines.append((0, 0, vals))
            #
            # self.bom_ids = lines
        elif option == "visita":
            self.ot_end = datetime.now() + timedelta(days=2)
            self.bom_ids = [(5, 0, 0)]
        elif option == "armado":
            self.ot_end = datetime.now() + timedelta(days=15)
            self.bom_ids = [(5, 0, 0)]
            # lines = []
            # vals = {
            #     'material_id': self.env["productos.inducom"].search([("product_id", "=", "C0001")]),
            #     'cantidad': 1,
            #     'estado': 'verificacion',
            # }
            # lines.append((0, 0, vals))
            #
            # vals = {
            #     'material_id': self.env["productos.inducom"].search([("product_id", "=", "C0005")]),
            #     'cantidad': 1,
            #     'estado': 'verificacion',
            # }
            # lines.append((0, 0, vals))
            #
            # self.bom_ids = lines

    @api.onchange("bom_ids")
    def onchange_bom(self):
        lista_codigos = self.bom_ids.mapped("material_id.product_id")
        # lista_productos = self.bom_ids.mapped("material_id.product_name")
        lista_estados = self.bom_ids.mapped("estado")
        total_avance = 0
        avance = 0
        if len(lista_codigos) != 0:
            avance = 100 / len(lista_codigos)
            for record in range(len(lista_codigos)):
                if lista_estados[record] == "disponible" or lista_estados[record] == "Compra2":
                    total_avance += 1

        else:
            total_avance = 0
        self.ot_progress = round(avance * total_avance, 2)

    def action_send_ot(self):
        print("sending email")
        # correos = self.to.mapped("email")
        # pdf_report = self.env.ref("modulo_operaciones.ot_order_template").report_action(self)
        # print(pdf_report)
        report_template_id = self.env.ref("modulo_operaciones.ot_order_template")._render_qweb_pdf(self.ids)
        data_record = base64.b64encode(report_template_id[0])
        ir_values = {
            'name': "%s.pdf" % self.ot_number,
            'type': 'binary',
            'datas': data_record,
            'store_fname': self.ot_number,
            'mimetype': 'application/x-pdf'
        }
        data_id = self.env["ir.attachment"].create(ir_values)
        template_mail_id = self.env.ref("modulo_operaciones.ot_mail_template").id
        template = self.env["mail.template"].browse(template_mail_id)
        template.attachment_ids = [(6, 0, [data_id.id])]
        template.send_mail(self.ids[0], True)
        template.attachment_ids = [(3, data_id.id)]

    @api.onchange("state_ot")
    def send_status_changed(self):
        valor = self.state_ot
        valor2 = self.get_status_ot(valor)
        if self.ot_number != "Nueva orden de trabajo":
            mail_values = {
                'subject': 'Cambio del estado de la orden No %s' % self.ot_number,
                'body_html': 'La orden de trabajo asignada a %s ha cambiado de estado a : %s' % (self.area,
                                                                                                 valor2),
                'email_to': self._get_email_to(),
                'email_from': 'botinducom@gmail.com'
            }
            self.env["mail.mail"].create(mail_values).send(True)
            self.state_ot = valor

    def _get_email_to(self):
        correos = self.to.mapped("email")
        correos2 = ",".join(correos)
        email_recipes = correos2 + "," + self.vendor_email
        return email_recipes


class product_index(models.Model):
    _name = "materiales.inducom"
    _description = "modelo para indexar los materiales ingresados"

    material_id = fields.Many2one("productos.inducom", string="Item")
    cantidad = fields.Integer(string="Cantidad", default=0)
    estado = fields.Selection([
        ("verificacion", "En verificacion"),
        ("disponible", "disponible"),
        ("compra", "Compra Pendiente"),
        ("Compra2", "Compra realizada")
    ], string="estado", default="verificacion")
    order_id = fields.Many2one("db.ots", string="lista")
